/**
 * Modal dialog box allowing user to search for a museum object post.
 */

/**
 * WordPress dependencies
 */
import {
    Button,
    Modal,
    ToggleControl,
    PanelBody,
    PanelRow
} from '@wordpress/components';

import {
    useState,
    Component,
} from '@wordpress/element';

import apiFetch from '@wordpress/api-fetch';

/**
 * The minimum interval between updating search results (ms).
 *
 * @type {number}
 */
const refreshInterval = 1000;

/**
 * A modal search box that live updates through REST api and returns the
 * WordPress post ID of the selected object.
 *
 * @param 
 *
 * @since 0.6.0
 */
class ObjectSearchBox extends Component {

    constructor ( props ) {
        super ( props );

        this.onChangeSearchText = this.onChangeSearchText.bind( this );
        this.onTitleToggle      = this.onTitleToggle.bind( this );
        this.fetchSearchResults = this.fetchSearchResults.bind( this );
        this.onKeyUp            = this.onKeyUp.bind( this );
        this.onButtonItemFocus  = this.onButtonItemFocus.bind( this );
        this.onButtonItemClick  = this.onButtonItemClick.bind( this );
        this.returnResult       = this.returnResult.bind( this );

        this.timerId        = null;
        this.lastRefresh    = new Date();
        this.searchInputRef = React.createRef();

        this.state = {
            searchText    : null,
            onlyTitle     : true,
            results       : [],
            selectedItem  : 0,
        }
    }

    /**
     * Fetch search results from REST api.
     *
     * @see wp-museum/src/general/rest.php
     *
     * @param {string}  searchText Current search text to find.
     * @param {boolean} onlyTitle  Whether to search just the post title or everything.
     */
    fetchSearchResults ( searchText, onlyTitle ) {
        const base_rest_path = '/wp-museum/v1/';

        this.lastRefresh = new Date();

        let queryString;
        if ( onlyTitle ) {
            queryString = `?post_title=${searchText}`;
        } else {
            queryString = `?s=${searchText}`;
        }

        apiFetch( { path: `${base_rest_path}all/${queryString}`} ).then( result => {
            this.setState( { results: result } );
        } );
    }

    /**
     * Increment the selected item in search results.
     */
    incSelectedItem ( ) {
        const { selectedItem , results } = this.state;
    
        if ( results.length === 0 ) {
            this.setState( { selectedItem : 0 } );
        } else if ( selectedItem  < results.length - 1 ) {
            this.setState( { selectedItem : selectedItem  + 1 } );
        } else {
            this.setState( { selectedItem : 0 } ); 
        }
    }

    /**
     * Decrement the selected item in search results.
     */
    decSelectedItem ( ) {
        const { selectedItem , results } = this.state;
    
        if ( results.length === 0 ) {
            this.setState( { selectedItem : 0 } );
        } else if ( selectedItem  > 0 ) {
            this.setState( { selectedItem : selectedItem  - 1 } );
        } else {
            this.setState( { selectedItem : results.length - 1 } ); 
        }
    }

    /**
     * Call the return callback with the WordPress post ID of the selected item,
     * if there is one, and close the modal.
     */
    returnResult ( ) {
        const {
            results,
            selectedItem,
        } = this.state;

        const {
            close,
            returnCallback,
        } = this.props;

        if ( results.length > 0 ) {
            const result = results[ selectedItem ];
            returnCallback ( result['ID'] );
        } else {
            returnCallback ( null );
        }

        close();
    }

    /**
     * Callback to fetch search results when input changes.
     *
     * Search only fires if the length of the input is at least three. Any pending
     * searches are cancelled. If it has been at least refreshInterval since the
     * last search, update search results immediately. Otherwise, update the search
     * results once refreshInterval has elapsed.
     * 
     * @param {object} event Event generated by <input> element.
     */
    onChangeSearchText( event ) {
        const currentTime = new Date();
        const content = event.target.value;
        this.setState( {
            searchText    : content,
            selectedItem  : 0,
        } );

        clearTimeout( this.timerId );

        if ( content.length > 2 ) {
            if ( currentTime - this.lastRefresh > refreshInterval ) {
                this.fetchSearchResults( content, this.state.onlyTitle );
            } else {
                this.timerId = setTimeout(
                    ( ) => this.fetchSearchResults( content, this.state.onlyTitle ),
                    refreshInterval - ( currentTime - this.lastRefresh )
                );
            }
        }
    }

    /**
     * Callback to toggle whether only post_title or all fields are searched.
     */
    onTitleToggle ( ) {
        const { onlyTitle, searchText } = this.state;
        this.setState( { 
            onlyTitle     : ! onlyTitle,
            selectedItem  : 0,
        } );
        this.fetchSearchResults( searchText, ! onlyTitle );
    }

    /**
     * Callback to capture keypresses from the search input for navigating the
     * search results.
     * 
     * @param {object} event Event generated by <input> element.
     */
    onKeyUp ( event ) {
        switch ( event.key ) {
            case 'ArrowDown':
                event.stopPropagation();
                this.incSelectedItem();
                break;
            case 'ArrowUp':
                event.stopPropagation();
                this.decSelectedItem();
                break;
            case 'Enter':
                event.stopPropagation();
                this.returnResult();
                break;
        }
    }

    /**
     * Stop Gutenberg from stealing event from the modal and navigating to
     * another block.
     * 
     * @param {object} event Event generated by <input> element.
     */
    onKeyDown ( event ) {
        if ( event.key === 'ArrowDown' || event.key === 'ArrowUp' || event.key === 'Enter' ) {
            event.stopPropagation();
        }
    }

    /**
     * Callback to sync selected item with the focused button.
     * 
     * @param {number} index The array index of the focused item.
     */
    onButtonItemFocus ( index ) {
        this.setState( { selectedItem : index } );
    }

    /**
     * Callback to set selected item to clicked result and then close the modal.
     *
     * @param {number} index The array index of the clicked item.
     */
    onButtonItemClick ( index ) {
        this.setState( { selectedItem : index }, this.returnResult );
    }

    /**
     * Callback to set focus to the search input when the modal appears.
     */
    componentDidMount( ) {
        this.searchInputRef.current.focus();
    }

    /**
     * Callback to ensure that any pending searches are cancelled when the modal
     * is closed.
     */
    componentWillUnmount( ) {
        clearTimeout( this.timerId );
    }

    /**
     * Renders the modal.
     */
    render() {
        const {
            close,
        } = this.props;
        
        return (
            <Modal
                className      = 'wpm-object-search-box'
                title          = 'Search For Object'
                onRequestClose = { close }
            >
                <ToggleControl
                        className = 'toggle-control'
                        label     = 'Search only title'
                        checked   = { this.state.onlyTitle }
                        onChange  = { this.onTitleToggle }
                    />
                <input 
                    className    = 'components-text-control__input'
                    placeholder  = 'Type to search...'
                    onChange     = { this.onChangeSearchText }
                    ref          = { this.searchInputRef }
                    onKeyUp      = { this.onKeyUp }
                    onKeyDown    = { this.onKeyDown }
                />
                <SearchResultsList
                    className         = 'search-results-list'
                    results           = { this.state.results }
                    selectedItem      = { this.state.selectedItem  }
                    onButtonItemFocus = { this.onButtonItemFocus }
                    onButtonItemClick = { this.onButtonItemClick }
                    onKeyDown         = { this.onKeyDown }
                    onKeyUp           = { this.onKeyUp }
                />
                <div
                    className = 'bottom-controls'
                >
                    <Button
                        isSecondary
                        isLarge
                        className   = 'cancel-button'
                        onClick     = { close }
                    >
                        Cancel
                    </Button>
                </div>
            </Modal>
        );
    }
}

/**
 * Component to display search results as a list of buttons.
 * 
 * @param {Object}   props                   Properties of the component.
 * @param {Array}    props.results           Array of results from REST request.
 * @param {number}   props.selectedItem      Index of the currently selected result item.
 * @param {function} props.onButtonItemFocus Callback for when item button receives focus.
 * @param {function} props.onButtonItemClick Callback for when item button is clicked.
 */
const SearchResultsList = ( props ) => {
    const {
        results,
        selectedItem,
        onButtonItemFocus,
        onButtonItemClick,
        onKeyDown,
        onKeyUp,
    } = props;

    if ( results.length > 0 ) {
        const listItems = results.map( ( result, index ) => (
                <li
                    key = { 'results-list-' + index }
                    className = { index === selectedItem  ? 'search-item selected' : 'search-item unselected' }
                >
                    <div
                        tabIndex  = '0'
                        className = 'search-result-button'
                        onFocus   = { ( ) => onButtonItemFocus( index ) }
                        onClick   = { ( ) => onButtonItemClick( index ) }
                        onMouseEnter = { () => onButtonItemFocus( index ) }
                        onKeyUp   = { ( event ) => event.key === 'Enter' ? onButtonItemClick( index ) : onKeyUp( event ) }
                        onKeyDown = { onKeyDown }
                    >
                        <div
                            className = 'search-result-title'
                        >
                            { result['post_title'] }
                        </div>
                        { result['cat_field'] &&
                            <div 
                                className = 'search-result-cat-id'
                            >
                                { result[ result[ 'cat_field' ] ] }
                            </div>
                        }
                    </div>
                </li>
            )   
        );
        return (
            <ul className = 'results-list'>{ listItems }</ul>
        );
    } else {
        return null;
    }
}

/**
 * Button to open the modal when clicked.
 * 
 * @param {object}   props                Properties of the component.
 * @param {function} props.returnCallback Function accepting WordPress post ID returned from search.
 * @param {object}   props.children       Children passed on to Button component.
 */
const ObjectSearchButton = (props) => {
	const {
        returnCallback,
        children 
    } = props;
	
	const [ isOpen, setOpen ] = useState( false );
    const openModal = () => setOpen( true );
    const closeModal = () => setOpen( false );

    return (
        <>
            <Button
                isSecondary 
                onClick = { openModal }
            >
                { children }
            </Button>
            { isOpen && (
                <ObjectSearchBox 
                    close          = { closeModal }
                    returnCallback = { returnCallback }
                />    
            ) }
        </>
    )
}

/**
 * Panel to embed or replace existing museum object.
 * 
 * @param {object}   props                     Properties of the component.
 * @param {function} props.onSearchModalReturn Function accepting WordPress post ID returned from search.
 * @param {string}   props.title               Title of the found object.
 * @param {string}   props.catID               The catalogue ID of the found object.
 * @param {number}   props.objectID            The WordPress ID of the found object.
 * @param {string}   props.objectURL           WordPress permalink of the found object.
 */
const ObjectEmbedPanel = ( props ) => {
	const { onSearchModalReturn, title, catID, objectID, objectURL, initialOpen } = props;

	let objectDescription;
	if ( objectID === null ) {
		objectDescription = (
			<div>
				Click 'Search' to embed object.";
			</div>
		);
	} else {
		objectDescription = (
			<div>
				<div>{ title }</div>
				<div>{ catID }</div>
				<div><a href = { objectURL }>View Object</a></div>
			</div>
		);
	}
	
	return (
		<PanelBody
			title = "Object"
			initialOpen = { initialOpen }
		>
			<PanelRow>
				{ objectDescription }
			</PanelRow>
			<PanelRow>
				<ObjectSearchButton
					returnCallback = { onSearchModalReturn }
				>
					{ objectID ? 'Replace' : 'Search' }
				</ObjectSearchButton>
			</PanelRow>
		</PanelBody>
	);
}

export { ObjectSearchButton, ObjectSearchBox, ObjectEmbedPanel };
