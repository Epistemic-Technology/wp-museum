<?php
/**
 * Functions for displaying museum objects, collections, etc on the front end.
 *
 * @package MikeThicke\WPMuseum
 */

namespace MikeThicke\WPMuseum;

/**	
 * Filter to make excerpts for museum objects if none exists.
 *
 * @param string   $excerpt_text Text of the excerpt as generated by get_the_excerpt.
 * @param \WP_POST $post The post.
 */
function mobject_excerpt_filter( $excerpt_text, $post ) {
	if ( $excerpt_text ) {
		return $excerpt_text;
	}
	return wp_trim_excerpt( '', $post );
}

/**
 * Filter to Override default excerpt length if excerpt length for object rows
 * is set in customizer.
 *
 * @param int $length The default lenght.
 */
function mobject_excerpt_length( $length ) {
	if ( is_admin() ) {
		return $length;
	}
	$display_options = get_customizer_settings()[ WPM_PREFIX . 'collection_style' ];
	if ( $display_options['excerpt_max_length'] ) {
		return $display_options['excerpt_max_length'];
	}
	return $length;
}

/**
 * Generate image sizes for post row thumbnails.
 */
function generate_image_sizes() {
	$display_options = get_customizer_settings()[ WPM_PREFIX . 'collection_style' ];

	add_image_size(
		WPM_PREFIX . 'list_thumb',
		$display_options['list_image_max_width'],
		$display_options['list_image_max_height']
	);
}

/**
 * Returns the first thumbnail of a post.
 *
 * @param int $post_id The post's id.
 */
function first_thumbnail( $post_id ) {
	$attachments = get_attached_media( 'image', $post_id );

	if ( $attachments ) {
		$attachment       = reset( $attachments );
		$image_attributes = wp_get_attachment_image_src( $attachment->ID, 'thumb' );
		return $image_attributes;
	}
	return '';
}

/**
 * Generate CSS text from an array of selectors, attributes, and values.
 *
 * @param [string => [string => string] ] $css_array CSS array - [selector => [attribute => value ] ].
 * @return string CSS text.
 */
function css_from_array( $css_array ) {
	$css_text = '';
	foreach ( $css_array as $selector => $style ) {
		$css_text .= ' ' . $selector . ' { ';
		foreach ( $style as $attribute => $value ) {
			$css_text .= $attribute . ': ' . $value . '; ';
		}
		$css_text .= ' }';
	}
	return $css_text;
}

/**
 * Insert CSS for museum objects into header.
 */
function object_css() {
	if ( is_singular( get_object_type_names() ) ) {
		$display_options = get_customizer_settings()[ WPM_PREFIX . 'mobject_style' ];
		$styles          = [];

		if ( 'bold' === $display_options['field_label_font_weight'] ) {
			$styles[ '.' . WPM_PREFIX . 'field-label-div' ]['font-weight'] = 'bold';
			$styles[ '.' . WPM_PREFIX . 'field-label' ]['font-weight']     = 'bold';
		}
		if ( $display_options['field_label_color'] ) {
			$styles[ '.' . WPM_PREFIX . 'field-label-div' ]['color'] = $display_options['field_label_color'];
			$styles[ '.' . WPM_PREFIX . 'field-label' ]['color']     = $display_options['field_label_color'];
		}
		if ( $display_options['field_text_color'] ) {
			$styles[ '.' . WPM_PREFIX . 'field-text' ]['color'] = $display_options['field_text_color'];
		}
		if ( 0 < $display_options['image_max_width'] ) {
			$styles[ '.' . WPM_PREFIX . 'obj-image img' ]['max-width'] = $display_options['image_max_width'] . 'px';
		}
		if ( 0 < $display_options['image_max_height'] ) {
			$styles[ '.' . WPM_PREFIX . 'obj-image img' ]['max-height'] = $display_options['image_max_height'] . 'px';
		}
		if ( 0 < $display_options['image_border_width'] ) {
			$styles[ '.' . WPM_PREFIX . 'obj-image img' ]['border-width'] = $display_options['image_border_width'] . 'px';
			$styles[ '.' . WPM_PREFIX . 'obj-image img' ]['border-style'] = 'solid';
		}
		if ( $display_options['image_border_color'] ) {
			$styles[ '.' . WPM_PREFIX . 'obj-image img' ]['border-color'] = $display_options['image_border_color'];
		}
		if ( 'right' === $display_options['image_gallery_position'] || 'left' === $display_options['image_gallery_position'] ) {
			$styles[ '#' . WPM_PREFIX . 'obj-gallery' ]['width']       = $display_options['image_max_width'];
			$styles[ '.' . WPM_PREFIX . 'obj-image' ]['margin-top']    = $display_options['image_margin'] . 'px';
			$styles[ '.' . WPM_PREFIX . 'obj-image' ]['margin-bottom'] = $display_options['image_margin'] . 'px';
		}
		switch ( $display_options['image_gallery_position'] ) {
			case 'right':
				$styles[ '#' . WPM_PREFIX . 'obj-gallery' ]['float']       = 'right';
				$styles[ '#' . WPM_PREFIX . 'obj-gallery' ]['margin-left'] = $display_options['image_gallery_margin'] . 'px';
				$styles[ '.' . WPM_PREFIX . 'field-text' ]['margin-right'] =
					(
						$display_options['image_gallery_margin'] +
						$display_options['image_max_width'] +
						$display_options['image_border_width']
					) . 'px !important';
				break;
			case 'left':
				$styles[ '#' . WPM_PREFIX . 'obj-gallery' ]['float']        = 'left';
				$styles[ '#' . WPM_PREFIX . 'obj-gallery' ]['margin-right'] = $display_options['image_gallery_margin'] . 'px';
				$styles[ '.' . WPM_PREFIX . 'field-text' ]['margin-left']   =
					(
						$display_options['image_gallery_margin'] +
						$display_options['image_max_width'] +
						$display_options['image_border_width']
					) . 'px !important';
				break;
			case 'top':
			case 'bottom':
				$styles[ '.' . WPM_PREFIX . 'obj-image' ]['margin-left']  = $display_options['image_margin'] . 'px';
				$styles[ '.' . WPM_PREFIX . 'obj-image' ]['margin-right'] = $display_options['image_margin'] . 'px';
				break;
		}

		/**
		 * Child object div
		 */
		$styles['.child-object']['display']            = 'flex';
		$styles['.child-object']['flex-direction']     = 'row';
		$styles['.child-object']['flex-wrap']          = 'nowrap';
		$styles['.child-object-thumb']['width']        = '100px';
		$styles['.child-object-thumb']['height']       = '100px';
		$styles['.child-object-thumb']['min-width']    = '100px';
		$styles['.child-object-thumb']['object-fit']   = 'cover';
		$styles['.child-object-thumb']['margin-right'] = '1em';

		echo '<style type="text/css">';
		echo esc_html( css_from_array( $styles ) );
		echo '</style>';
	}
}

/**
 * Insert css for collections into header.
 */
function collection_css() {
	if ( is_singular( WPM_PREFIX . 'collection' ) ) {
		$display_options = get_customizer_settings()[ WPM_PREFIX . 'collection_style' ];
		$styles          = [];

		if ( ! $display_options['list_color_1'] ) {
			$display_options['list_color_1'] = 'transparent';
		}
		if ( ! $display_options['list_color_2'] ) {
			$display_options['list_color_2'] = 'transparent';
		}
		if ( $display_options['alternate_list_color'] ) {
			$styles[ '.' . WPM_PREFIX . 'object-row:nth-child(odd)' ]['background-color']  = $display_options['list_color_1'];
			$styles[ '.' . WPM_PREFIX . 'object-row:nth-child(even)' ]['background-color'] = $display_options['list_color_2'];
		} else {
			$styles[ '.' . WPM_PREFIX . 'object-row' ]['background-color'] = $display_options['list_color_1'];
		}
		$styles[ '.' . WPM_PREFIX . 'object-row a' ]['text-decoration']       = 'none !important';
		$styles[ '.' . WPM_PREFIX . 'object-row a' ]['color']                 = 'inherit !important';
		$styles[ '.' . WPM_PREFIX . 'object-row-thumbnail' ]['float']         = $display_options['list_thumbnail_position'];
		$styles[ '.' . WPM_PREFIX . 'object-row-thumbnail' ]['max-width']     = $display_options['list_image_max_width'] . 'px';
		$styles[ '.' . WPM_PREFIX . 'object-row-thumbnail' ]['max-height']    = $display_options['list_image_max_height'] . 'px';
		$styles[ '.' . WPM_PREFIX . 'object-row-thumbnail' ]['margin']        = '20px';
		$styles[ '.' . WPM_PREFIX . 'object-row-textwrapper' ]
				[ 'margin-' . $display_options['list_thumbnail_position'] ] =
					( $display_options['list_image_max_width'] + 20 ) . 'px';
		$styles[ '.' . WPM_PREFIX . 'object-row h4' ]['clear']              = 'none';
		if ( $display_options['excerpt_line_height'] ) {
			$styles[ '.' . WPM_PREFIX . 'object-row-excerpt' ]['line-height'] = $display_options['excerpt_line_height'] . 'em';
		}
		if ( $display_options['excerpt_font_size'] ) {
			$styles[ '.' . WPM_PREFIX . 'object-row-excerpt' ]['font-size'] = $display_options['excerpt_font_size'] . 'em';
		}

		$styles[ '.' . WPM_PREFIX . 'object-row' ]['padding']    = '10px';
		$styles[ '.' . WPM_PREFIX . 'object-row' ]['min-height'] = ( $display_options['list_image_max_height'] + 40 ) . 'px';

		echo '<style type="text/css">';
		echo esc_html( css_from_array( $styles ) );
		echo '</style>';
	}
}
